package test_robo;
import java.io.IOException;
import com.pi4j.io.serial.Serial;
import com.pi4j.io.serial.SerialFactory;
import com.pi4j.io.serial.SerialPortException;
//import org.apache.log4j.Logger;


public class io {
    public static void main(String[] args) throws InterruptedException{
        update one = new update();
        update.setUp();
        one.start();
        Thread.sleep(50);
        if(update.self_test()){
            System.out.println("good!");
        }else{
            System.out.println("nope!");
        }
        double tmp[] = {1.0,2.0,3.0,4.0,5.0,6.0};
        double tmp2[] = {2.0,3.0,4.0,5.0,6.0,7.0};
        update.set_motors(tmp);
        Thread.sleep(150);
        //update.force_out("[rr");
        Thread.sleep(150);
        //System.out.println(update.force_in());
        System.out.println("Next!");
        System.out.println(update.get_depth());
        for(int x = 0; x< 50; x++){
        	update.force_out("[v");
            Thread.sleep(100);
            System.out.println(update.force_in());
        }
        update.set_motors(tmp2);
        Thread.sleep(1500);
        System.out.println("end");
        update.stop();
        
    }

}
class update implements Runnable{//interface with sensors
    Thread t;
    static int init = 0;
    static String ard;
    static String port;
    static int br;
    static Serial serial;
    static String output;
    static String input = "def";
    static boolean ready = false;
    static int IMU_pitch = 0, IMU_roll = 0, depth = 0, waterLvl = 0;
    static boolean run = false;
    static double[] motor_stop = {0,0,0,0,0,0,};
    //private static Logger logger = Logger.getLogger(update.class.getCanonicalName());
    public static double get_depth(){
        return depth;
    }
    public static double getWaterSensor() {
        // TODO Auto-generated method stub
        //checks if we are taking on water
        return waterLvl;
    }
    public static int currentDepth(){
        return depth;
    }
    public static double sonar_dist(double freq){
        return -1;
    }
    public static double sonar_dir(double freq){
        return -1;
    }
    public static double sonar_depth(double freq, double current_depth){
        return -1;
    }
    public static double IMU_roll(){
        return IMU_roll;
    }
    public static double IMU_pitch(){
        return IMU_pitch;
    }
    
    public void start() {
        if (t == null) {
            t = new Thread(this, "update");
            t.start();
         }
    }
    @Override
    public void run(){
    	long start = System.currentTimeMillis();
        while(run){
            if(serial.isOpen()){
                try{
                    if(ready && (System.currentTimeMillis() >= start+100)){
                    	start = System.currentTimeMillis();
                        //System.out.println("writing");
                        serial.write(output);
                    }
                }catch(Exception e){
                    //debug.error(e.getMessage());
                    System.out.println(e);
                }
            } 
        }
        synchronized(t){
            t.notify();
        }
    }
    public static void setUp(){
        ready = true;
        run = true;
        System.out.println("Setting up serial coms...");
        ard = "/dev/ttyACM0";
        port = System.getProperty("serial.port", ard);
        br = Integer.parseInt(System.getProperty("baud.rate", "1200"));
        serial = SerialFactory.createInstance();
        serial.addListener(event -> {
            // print out the data received to the console
            String payload;
            try {
                payload = event.getAsciiString();
            } catch (IOException ioe) {
                throw new RuntimeException(ioe);
            }
            parseIn(payload);
        });
        System.out.println("Opening port [" + port + ":" + Integer.toString(br) + "]");
        try {
            serial.open(port, br);
        } catch (IOException ioe) {
            throw new RuntimeException(ioe);
        }
        System.out.println("Port is opened.");
    }
    public static void parseIn(String me){
       if(!me.equals(input)){
    	   init = 2;
    	   //System.out.println("i got something: "+me);
           input = me;
           if(input.length() >= 10 && me.startsWith("Running self test")){
               return;
           }else{
               if(me.split(",").length == 4){
                   IMU_pitch = Integer.parseInt(me.split(",")[0].trim());
                   IMU_roll = Integer.parseInt(me.split(",")[1].trim());
                   depth = Integer.parseInt(me.split(",")[2].trim());
                   waterLvl = Integer.parseInt(me.split(",")[3].trim());
               }else{
                   System.out.println("Bad input from ard: "+me);
               }
           }   
       }
    }
    public static void set_motors(double[] x){
        ready = false;
        output = "[n";
        for(int i = 0; i<6; i++){
            output += (int)(x[i]);
            output += ",";
        }   
        ready = true;
    }
    public static boolean self_test(){
        ready = false;
        output = "[t";
        int test_num = (int) (Math.random()*122);
        output += test_num;
        output += ",";
        ready = true;
        double[] motor_test = {100,100,100,100,100,100,};
        set_motors(motor_test);
        String good_string = "Running self test: " + test_num;
        //System.out.println("Test string is: "+good_string);
        try{
        	while(init != 2){
                Thread.sleep(5);
        	}
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        if(!input.trim().equalsIgnoreCase(good_string.trim())){
            System.out.println("Bad input from ard on st: " + input);
            set_motors(motor_stop);
            return false;
        }else{
        	try{
                   Thread.sleep(1000);
            }catch(Exception e){
                System.out.println(e.getMessage());
            }
        	set_motors(motor_stop);
            return true;
        }
    }
    public static void force_out(String i){
        output = i;
    }
    public static String force_in(){
        return input;
    }
    public static void stop(){
    	run = false;

    	try{
    		serial.close();
    	}catch(Exception e){
    		System.out.println(e.getMessage());
    	}
    	System.out.println("Connection terminated");
    }
}
